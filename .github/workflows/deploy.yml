name: 🚀 Deploy to DigitalOcean

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: 🔧 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 📦 Install frontend dependencies
      working-directory: ./apps/frontend
      run: npm ci

    - name: 🧪 Run frontend tests
      working-directory: ./apps/frontend
      run: npm run lint

    - name: 🏗️ Build frontend
      working-directory: ./apps/frontend
      run: npm run build

    - name: 📦 Install backend dependencies
      working-directory: ./apps/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🧪 Run backend tests
      working-directory: ./apps/backend
      run: |
        # Add your backend tests here if you have them
        echo "Backend tests would run here"

    - name: 🚀 Deploy to DigitalOcean
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Install sshpass for password authentication
        sudo apt-get update && sudo apt-get install -y sshpass
        
        # Deploy to server using password authentication
        sshpass -p '${{ secrets.SERVER_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password root@${{ secrets.SERVER_HOST }} << 'EOF'
          echo "🚀 Starting monorepo deployment..."
          
          # Update package lists first
          apt-get update
          
          # Check Node.js version and install/upgrade if needed
          NODE_VERSION=""
          if command -v node &> /dev/null; then
            NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
            echo "🔍 Current Node.js version: $(node --version)"
          fi
          
          # Install or upgrade Node.js if not available or not version 18+
          if ! command -v node &> /dev/null || ! command -v npm &> /dev/null || [ "$NODE_VERSION" -lt 18 ] 2>/dev/null; then
            echo "📦 Installing/upgrading Node.js and npm..."
            
            # Remove existing Node.js packages to avoid conflicts
            echo "🧹 Removing existing Node.js packages..."
            apt-get remove -y nodejs npm libnode72 nodejs-doc 2>/dev/null || true
            apt-get autoremove -y 2>/dev/null || true
            
            # Clean package cache
            apt-get clean
            
            # Install Node.js 18.x from NodeSource
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
            
            # Verify installation
            if ! command -v node &> /dev/null; then
              echo "❌ Node.js installation failed!"
              exit 1
            fi
            
            if ! command -v npm &> /dev/null; then
              echo "❌ npm installation failed!"
              exit 1
            fi
            
            echo "✅ Node.js $(node --version) and npm $(npm --version) installed successfully"
          else
            echo "✅ Node.js $(node --version) and npm $(npm --version) already installed and up to date"
          fi
          
          # Install PM2 if not already installed
          if ! command -v pm2 &> /dev/null; then
            echo "📦 Installing PM2..."
            npm install -g pm2
            if ! command -v pm2 &> /dev/null; then
              echo "❌ PM2 installation failed!"
              exit 1
            fi
            echo "✅ PM2 installed successfully"
          else
            echo "🔄 Updating PM2..."
            npm install -g pm2@latest
            echo "✅ PM2 updated successfully"
          fi
          
          # Install Python and pip if not already installed
          if ! command -v python3 &> /dev/null; then
            echo "📦 Installing Python3..."
            apt-get install -y python3 python3-pip python3-venv
            if ! command -v python3 &> /dev/null; then
              echo "❌ Python3 installation failed!"
              exit 1
            fi
            echo "✅ Python3 $(python3 --version) installed successfully"
          else
            echo "✅ Python3 $(python3 --version) already installed"
          fi
          
          # Install curl for health checks
          if ! command -v curl &> /dev/null; then
            echo "📦 Installing curl..."
            apt-get install -y curl
            echo "✅ curl installed successfully"
          else
            echo "✅ curl already installed"
          fi
          
          # Create deployment directory
          mkdir -p /opt/hosting/static-ads-generator
          
          # Navigate to monorepo directory
          cd /opt/hosting/static-ads-generator
        EOF

        # Copy the entire project to server
        sshpass -p '${{ secrets.SERVER_PASSWORD }}' scp -r -o StrictHostKeyChecking=no . root@${{ secrets.SERVER_HOST }}:/opt/hosting/static-ads-generator/

        # Continue with server setup
        sshpass -p '${{ secrets.SERVER_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password root@${{ secrets.SERVER_HOST }} << 'EOF'
          echo "📁 Code copied to server, setting up..."
          
          # Navigate to monorepo directory
          cd /opt/hosting/static-ads-generator
          
          # Verify we have the required tools
          if ! command -v npm &> /dev/null; then
            echo "❌ npm not found! Cannot proceed with frontend setup."
            exit 1
          fi
          
          if ! command -v python3 &> /dev/null; then
            echo "❌ python3 not found! Cannot proceed with backend setup."
            exit 1
          fi
          
          # Install frontend dependencies
          echo "📦 Installing frontend dependencies..."
          cd apps/frontend
          if [ -f package.json ]; then
            npm ci --production
            if [ $? -ne 0 ]; then
              echo "❌ Frontend dependency installation failed!"
              exit 1
            fi
            echo "✅ Frontend dependencies installed successfully"
          else
            echo "❌ package.json not found in frontend directory!"
            exit 1
          fi
          
          # Install backend dependencies
          echo "📦 Installing backend dependencies..."
          cd ../backend
          if [ -f requirements.txt ]; then
            pip3 install -r requirements.txt
            if [ $? -ne 0 ]; then
              echo "❌ Backend dependency installation failed!"
              exit 1
            fi
            echo "✅ Backend dependencies installed successfully"
          else
            echo "❌ requirements.txt not found in backend directory!"
            exit 1
          fi
          
          # Build frontend
          echo "🏗️ Building frontend..."
          cd ../frontend
          npm run build
          if [ $? -ne 0 ]; then
            echo "❌ Frontend build failed!"
            exit 1
          fi
          echo "✅ Frontend built successfully"
          
          # Stop existing PM2 processes
          echo "🛑 Stopping existing PM2 processes..."
          pm2 stop all 2>/dev/null || true
          pm2 delete all 2>/dev/null || true
          
          # Start applications with PM2
          echo "🔄 Starting applications with PM2..."
          cd /opt/hosting/static-ads-generator
          if [ -f ecosystem.config.js ]; then
            pm2 start ecosystem.config.js
            if [ $? -ne 0 ]; then
              echo "❌ PM2 start failed!"
              exit 1
            fi
            echo "✅ Applications started with PM2"
          else
            echo "❌ ecosystem.config.js not found!"
            exit 1
          fi
          
          # Save PM2 configuration
          pm2 save
          
          # Show final status
          echo "📊 Final PM2 Status:"
          pm2 status
          
          # Wait a moment for services to start
          sleep 5
          
          # Basic health check
          echo "🏥 Performing basic health checks..."
          if curl -f http://localhost:3000 >/dev/null 2>&1; then
            echo "✅ Frontend is responding on port 3000"
          else
            echo "⚠️ Frontend may not be responding on port 3000"
          fi
          
          if curl -f http://localhost:8000/health >/dev/null 2>&1; then
            echo "✅ Backend is responding on port 8000"
          else
            echo "⚠️ Backend may not be responding on port 8000"
          fi
          
          echo "✅ Monorepo deployment complete!"
          echo "🌐 Frontend: https://kraftey.com"
          echo "🌐 Backend: https://staticapi.kraftey.com"
        EOF


  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 🏥 Health Check Frontend
      run: |
        sleep 30  # Wait for deployment to complete
        curl -f https://kraftey.com || exit 1
        echo "✅ Frontend is healthy"

    - name: 🏥 Health Check Backend
      run: |
        curl -f https://staticapi.kraftey.com/health || exit 1
        echo "✅ Backend is healthy"

    - name: 📢 Notify Deployment Success
      run: |
        echo "🎉 Deployment successful!"
        echo "🌐 Frontend: https://kraftey.com"
        echo "🌐 Backend: https://staticapi.kraftey.com"
        echo "📊 API Docs: https://staticapi.kraftey.com/docs"