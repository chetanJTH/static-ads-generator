// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
  subscription     Subscription?
  usageStats       UsageStats?
  userCredits      UserCredits?
  purchases        Purchase[]
  featureUsages    FeatureUsage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id         String     @id @default(cuid())
  name       String
  brandKitId String?
  creatives  Creative[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Creative {
  id         String    @id @default(cuid())
  projectId  String
  templateId String?
  recipeJson String
  thumbUrl   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  versions   Version[]
  shares     Share[]
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Version {
  id              String   @id @default(cuid())
  creativeId      String
  recipeJson      String
  exportSquareUrl String?
  exportStoryUrl  String?
  exportLinkUrl   String?
  createdAt       DateTime @default(now())
  
  creative Creative @relation(fields: [creativeId], references: [id], onDelete: Cascade)
}

model Share {
  id         String    @id @default(cuid())
  creativeId String
  slug       String    @unique
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  
  creative Creative @relation(fields: [creativeId], references: [id], onDelete: Cascade)
}

// Subscription and Premium Features
model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  plan              String   // 'free', 'pro', 'enterprise'
  status            String   // 'active', 'inactive', 'canceled', 'past_due'
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Credits/Tokens System
model UserCredits {
  id                    String   @id @default(cuid())
  userId                String   @unique
  // Different types of credits
  backgroundRemovalCredits   Int  @default(0)  // Credits for background removal
  imageUpscaleCredits       Int  @default(0)   // Credits for image upscaling
  watermarkRemovalCredits   Int  @default(0)   // Credits for watermark removal
  imageEditingCredits       Int  @default(0)   // Credits for image editing
  // General tokens (can be used for any feature)
  generalTokens             Int  @default(0)   // Universal tokens
  // Free tier limits (unlimited during growth phase)
  freeBackgroundRemovals    Int  @default(999999)   // Unlimited for growth
  freeImageUpscales         Int  @default(999999)   // Unlimited for growth
  lastFreeResetDate         DateTime @default(now())
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Purchase History
model Purchase {
  id              String   @id @default(cuid())
  userId          String
  purchaseType    String   // 'subscription', 'credits', 'tokens'
  productId       String   // Plan ID or credit package ID
  productName     String   // Human readable name
  amount          Float    // Amount paid
  currency        String   @default("USD")
  stripePaymentIntentId String? @unique
  stripeSessionId String?  @unique
  status          String   // 'pending', 'completed', 'failed', 'refunded'
  creditsGranted  String?  // JSON string with credit amounts granted
  metadata        String?  // Additional purchase metadata as JSON string
  purchasedAt     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, purchasedAt])
  @@index([status])
}

model UsageStats {
  id                    String   @id @default(cuid())
  userId                String   @unique
  backgroundRemovalCount Int     @default(0)
  imageUpscaleCount     Int      @default(0)
  imageEditingCount     Int      @default(0)
  watermarkRemovalCount Int      @default(0)
  apiCallsCount         Int      @default(0)
  lastResetDate         DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Premium Feature Usage Logs
model FeatureUsage {
  id              String   @id @default(cuid())
  userId          String
  feature         String   // 'background_removal', 'image_upscale', 'image_editing', 'watermark_removal'
  inputUrl        String?
  outputUrl       String?
  processingTime  Float?
  success         Boolean  @default(true)
  errorMessage    String?
  // Credit tracking
  creditsUsed     Int      @default(1)    // How many credits were deducted
  creditType      String?  // 'specific', 'general', 'free'
  wasFreeTier     Boolean  @default(false) // Was this a free tier usage
  // Additional data
  metadata        String?  // JSON string for additional data
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, feature])
  @@index([createdAt])
  @@index([userId, wasFreeTier])
}

// Blog System Models
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String   // Full blog content in markdown/HTML
  category    String
  tags        String?  // JSON array of tags
  author      String   @default("Kraftey Team")
  featuredImage String?
  status      String   @default("published") // 'draft', 'published', 'archived'
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Analytics
  viewCount       Int      @default(0)
  lastViewedAt    DateTime?
  
  // Internal linking
  internalLinks   String?  // JSON array of internal links used
  
  @@index([slug])
  @@index([category])
  @@index([status, publishedAt])
  @@index([publishedAt])
}

model BlogCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color for UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([slug])
}

model BlogTag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  
  @@index([slug])
}
